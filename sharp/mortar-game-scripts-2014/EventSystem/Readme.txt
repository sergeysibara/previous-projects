Особенности:
* Не обязательно отписываться при удалении подписчика для классов, наследуемых от Unity.Object в глобальных событиях. 
  При публикации глобальных событий, если подписчик был удалён, система сама определит, что ссылка на подписчика равна null и удалит связанные с ним данные.
  Для локальных событий нет автоудаление при обращении. Потом возможно будет сделано выборочно - через опцию в коде EventAggregator.
* Удаление подписчиков при смене уровня, в методе OnLevelWasLoaded. После Awake, но перед Start. По этой причине EventAgregator реализован, как Singleton.
Потом возможно будет сделано выборочно - через опцию в коде EventAggregator.
* Подписчик не может дважды подписаться на одно и то же событие, если он предварительно не отписался от него.
* Все подписчики и события отображаются в инспекторе. Подписчикам и методам можно задавать свои имена в методе Subscribe.
* Работает также с классами, не наследуемыми от Monobehavior.
* При публикации событий можно указывать, можно ли публиковать из неактивного компонента, а также может ли неактивный компонент принять уведомление.
- Можно публиковать как глобальные события, так и выборочно для конкретных классов.

todo:
1) Можно сделать автоочистку подписчиков выборочно - через опцию в коде EventAggregator.

Недостатки:
* скорость немного медленней sendmessage
* Нельзя подписываться в Awake, т.к. при удалении событий в методе OnLevelWasLoaded, удалятся также и добавленные в текущем уровне события.



Не тестилось в  следующих ситуацих:
при загрузке уровня методами Application.LoadLevelAsync, Application.LoadLevelAdditive, Application.LoadLevelAdditiveAsync. Проверен только вариант с Application.LoadLevel.
